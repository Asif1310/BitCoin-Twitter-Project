# -*- coding: utf-8 -*-
"""BTC data access and cleaning.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1t31lOG3jqoIoR_9M2fAVyb0NOcbwwuWX
"""

import requests
from datetime import datetime
import pandas as pd

"""***Storing the parameters for API Call***"""

from_symbol = 'BTC'
to_symbol = 'USD'
exchange = 'Bitstamp'
datetime_interval = 'day'

"""***Defining the functions***"""

def download_data(from_symbol, to_symbol, exchange, datetime_interval):
    supported_intervals = {'minute', 'hour', 'day'}
    assert datetime_interval in supported_intervals,\
        'datetime_interval should be one of %s' % supported_intervals
    print('Downloading %s trading data for %s %s from %s' %
          (datetime_interval, from_symbol, to_symbol, exchange))
    base_url = 'https://min-api.cryptocompare.com/data/histo'
    url = '%s%s' % (base_url, datetime_interval)
    params = {'fsym': from_symbol, 'tsym': to_symbol,
              'limit': 2000, 'aggregate': 1,
              'e': exchange}
    request = requests.get(url, params=params)
    data = request.json()
    return data
def convert_to_dataframe(data):
    df = pd.io.json.json_normalize(data, ['Data'])
    df['datetime'] = pd.to_datetime(df.time, unit='s')
    df = df[['datetime', 'low', 'high', 'open',
             'close', 'volumefrom', 'volumeto']]
    return df

"""***Extracting data from the API***"""

data = download_data(from_symbol, to_symbol, exchange, datetime_interval)
df = convert_to_dataframe(data)

"""***Data Cleaning***"""

def filter_empty_datapoints(df):
    indices = df[df.sum(axis=1) == 0].index
    print('Filtering %d empty datapoints' % indices.shape[0])
    df = df.drop(indices)
    return df

df = filter_empty_datapoints(df)

"""***Calculating the percent change***"""

df['prev'] = df['close'].shift(1)
df1 = df[1:][['datetime','close','prev']]
df1['per'] = ((df1['close']-df1['prev'])/df1['prev'])*100
df1.per = df1.per.round(2)

"""***Filtering the data***"""

df_list = df1[df1['per'] >= 10.00]
df_list = df_list.append(df1[df1['per'] <= -10.00])

df_dates = df_list[['datetime']]
df_dates['first'] = df_list['datetime'] - pd.to_timedelta(2, unit='d')
df_dates['last'] = df_list['datetime'] - pd.to_timedelta(1, unit='d')
df_dates = df_dates.reset_index()

df_dates.to_csv('btc.csv')
